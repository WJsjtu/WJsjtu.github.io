{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/PictureRenderer.js","src/PictureShader.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiPicture","min","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","PictureRenderer","renderer","PIXI","ObjectRenderer","PictureShader","glCore","prototype","Object","create","constructor","onContextChange","gl","quad","Quad","normalShader","initVao","_tempClamp","Float32Array","_tempColor","start","flush","render","sprite","texture","valid","_renderNormal","shader","bindShader","state","setBlendMode","blendMode","bindVao","vao","uvs","_uvs","vertices","vertexData","x0","y0","x1","y1","x2","y2","x3","y3","upload","frame","base","baseTexture","clamp","x","width","y","height","realWidth","uniforms","uTextureClamp","color","utils","hex2rgb","tint","alpha","worldAlpha","uColor","bindTexture","draw","TRIANGLES","WebGLRenderer","registerPlugin","CanvasRenderer","CanvasSpriteRenderer","Shader","bind","myPlugin","assign","extras"],"mappings":"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","file":"pixi-picture.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","var PictureShader = require('./PictureShader'),\n    glCore = PIXI.glCore;\n\n/**\n * Renderer that clamps the texture so neighbour frames wont bleed on it\n * immitates context2d drawImage behaviour\n *\n * @class\n * @memberof PIXI.extras\n * @extends PIXI.ObjectRenderer\n * @param renderer {PIXI.WebGLRenderer} The renderer this plugin works for\n */\nfunction PictureRenderer(renderer) {\n    PIXI.ObjectRenderer.call(this, renderer);\n}\n\nPictureRenderer.prototype = Object.create(PIXI.ObjectRenderer.prototype);\nPictureRenderer.prototype.constructor = PictureRenderer;\n\nPictureRenderer.prototype.onContextChange = function() {\n    var gl = this.renderer.gl;\n    this.quad = new PIXI.Quad(gl);\n    this.normalShader = new PictureShader(gl);\n    this.quad.initVao(this.normalShader);\n    this._tempClamp = new Float32Array(4);\n    this._tempColor = new Float32Array(4);\n};\n\nPictureRenderer.prototype.start = function() {\n    //noop\n};\n\nPictureRenderer.prototype.flush = function() {\n    //noop\n};\n\n/**\n * Renders the picture object.\n *\n * @param sprite {PIXI.tilemap.PictureSprite} the picture to render\n */\nPictureRenderer.prototype.render = function(sprite) {\n    if (!sprite.texture.valid) {\n        return;\n    }\n    //you can add different render modes here\n    //multiple shaders and stuff\n    this._renderNormal(sprite, this.normalShader);\n};\n\nPictureRenderer.prototype._renderNormal = function(sprite, shader) {\n    var renderer = this.renderer;\n    renderer.bindShader(shader);\n    renderer.state.setBlendMode(sprite.blendMode);\n    var quad = this.quad;\n    renderer.bindVao(quad.vao);\n    var uvs = sprite.texture._uvs;\n\n    //sprite already has calculated the vertices. lets transfer them to quad\n    var vertices = quad.vertices;\n    for (var i=0;i<8;i++) {\n        quad.vertices[i] = sprite.vertexData[i];\n    }\n\n    //SpriteRenderer works differently, with uint32 UVS\n    //but for our demo float uvs are just fine\n    quad.uvs[0] = uvs.x0;\n    quad.uvs[1] = uvs.y0;\n    quad.uvs[2] = uvs.x1;\n    quad.uvs[3] = uvs.y1;\n    quad.uvs[4] = uvs.x2;\n    quad.uvs[5] = uvs.y2;\n    quad.uvs[6] = uvs.x3;\n    quad.uvs[7] = uvs.y3;\n\n    //TODO: add baricentric coords here\n    quad.upload();\n\n    var frame = sprite.texture.frame;\n    var base = sprite.texture.baseTexture;\n    var clamp = this._tempClamp;\n    //clamping 0 pixel from left-top side and 1 from top-bottom to reduce border artifact\n    //this is our plugin main purpose\n    clamp[0] = frame.x / base.width;\n    clamp[1] = frame.y / base.height;\n    clamp[2] = (frame.x + frame.width) / base.width - 1.0 / base.realWidth;\n    clamp[3] = (frame.y + frame.height) / base.height - 1.0 / base.realWidth;\n    //take a notice that size in pixels is realWidth,realHeight\n    //width and height are divided by resolution\n    shader.uniforms.uTextureClamp = clamp;\n\n    var color = this._tempColor;\n    PIXI.utils.hex2rgb(sprite.tint, color);\n    var alpha = sprite.worldAlpha;\n    //premultiplied alpha tint\n    //of course we could do that in shader too\n    color[0] *= alpha;\n    color[1] *= alpha;\n    color[2] *= alpha;\n    color[3] = alpha;\n    shader.uniforms.uColor = color;\n\n    // there are two ways of binding a texture in pixi-v4\n\n    // force texture in unit 0\n    renderer.bindTexture(base, 0, true);\n\n    // \"SMART\" binding, can be a bit faster\n    // shaders.uniforms.uSampler = renderer.bindTexture(base);\n\n    quad.vao.draw(this.renderer.gl.TRIANGLES, 6, 0);\n};\n\n// render sprite with our stuff\nPIXI.WebGLRenderer.registerPlugin('picture', PictureRenderer);\n// fallback for canvas, old one\nPIXI.CanvasRenderer.registerPlugin('picture', PIXI.CanvasSpriteRenderer);\n\nmodule.exports = PictureRenderer;\n","\n\n/**\n * @class\n * @extends PIXI.Shader\n * @memberof PIXI.extras\n * @param gl {PIXI.Shader} The WebGL shader manager this shader works for.\n */\nfunction PictureShader(gl)\n{\n    PIXI.Shader.call(this,\n        gl,\n        \"#define GLSLIFY 1\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n    vTextureCoord = aTextureCoord;\\n}\\n\",\n        \"#define GLSLIFY 1\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uTextureClamp;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec2 textureCoord = clamp(vTextureCoord, uTextureClamp.xy, uTextureClamp.zw);\\n    vec4 sample = texture2D(uSampler, textureCoord);\\n    gl_FragColor = sample * uColor;\\n    gl_FragColor = vec4(1.0, 1.0, 0.0, 0.0);\\n}\\n\"\n    );\n    //do some stuff, like default values for shader\n    //dont forget to bind it if you really are changing the uniforms\n    this.bind();\n    //default tint\n    //Its an example, actually PictureRenderer takes care of this stuff\n    this.uniforms.uColor = new Float32Array([1, 1, 1, 1]);\n}\n\nPictureShader.prototype = Object.create(PIXI.Shader.prototype);\nPictureShader.prototype.constructor = PictureShader;\nmodule.exports = PictureShader;\n","var myPlugin = {\n    PictureRenderer: require('./PictureRenderer')\n};\n\n//dump everything into extras\n\nObject.assign(PIXI.extras, myPlugin);\n\nmodule.exports = myPlugin;\n"],"sourceRoot":"."}